mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>%
mutate(value = paste0(round(value*100, 0), "% (", category, ")")) %>%
pivot_wider()
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>%
mutate(value = paste0(round(value*100, 0), "% (", category, ")"))
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>%
mutate(value = paste0(round(value*100, 0), "% (", category, ")")) %>%
select(-category) %>%
pivot_wider()
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>%
mutate(value = paste0(round(value*100, 0), "% (", category, ")"))
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>%
mutate(value = paste0(round(value*100, 0), "% (", category, ")")) %>%
# select(-category) %>%
pivot_wider()
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>%
mutate(value = paste0(round(value*100, 0), "% (", category, ")")) %>%
select(-category) %>%
pivot_wider()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
data(model_data)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
model_data$nema
pred_new()
p <- model_data$nema %>%
ggplot() +
geom_boxplot(aes(x = 1, y = chao1)) +
geom_hline(aes(yintercept = nematode, colour = sample), data = pred_new(),
linetype = 2) +
coord_flip()
p
golem::run_dev()
golem::run_dev()
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
soildiveragro::run_app() # add parameters here (if any)
model_data <- readRDS(my_data)
model_data <- readRDS("model_data.rds")
usethis::use_data(model_data, overwrite = TRUE)
pred_models <- readRDS("pred_models.rds")
rotations <- readRDS("rotations.rds")
scales <- readRDS("rotations.rds")
scales <- readRDS("scales.rds")
usethis::use_data(model_data, overwrite = TRUE)
usethis::use_data(pred_models, overwrite = TRUE)
usethis::use_data(rotations, overwrite = TRUE)
usethis::use_data(scales, overwrite = TRUE)
golem::run_dev()
library(soildiveragro)
golem::run_dev()
golem::run_dev()
golem::run_dev()
?set_names
golem::run_dev()
mtcars
mtcars %>% set_names(., c("a", "b"))
library(tidyverse)
mtcars %>% set_names(., c("a", "b"))
?safeError
?showModal
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
23-5
golem::run_dev()
?drop_na
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
library(soildiveragro)
createAppManifest()
?createAppManifest
??createAppManifest
rsconnect::writeManifest()
rsconnect::writeManifest()
renv::status()
renv::init()
## Fill the DESCRIPTION ----
## Add meta data about your application and set some default {golem} options
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "soildiveragro", # The name of the golem package containing the app (typically lowercase, no underscore or periods)
pkg_title = "PKG_TITLE", # What the Package Does (One Line, Title Case, No Period)
pkg_description = "PKG_DESC.", # What the package does (one paragraph).
authors = person(
given = "AUTHOR_FIRST", # Your First Name
family = "AUTHOR_LAST", # Your Last Name
email = "AUTHOR@MAIL.COM", # Your email
role = c("aut", "cre") # Your role (here author/creator)
),
repo_url = NULL, # The URL of the GitHub repo (optional),
pkg_version = "0.0.0.9000", # The version of the package containing the app
set_options = TRUE # Set the global golem options
)
## Install the required dev dependencies ----
golem::install_dev_deps()
## Create Common Files ----
## See ?usethis for more information
usethis::use_mit_license("Alberto Garre") # You can set another license here
golem::use_readme_rmd(open = FALSE)
devtools::build_readme()
# go to dev/02_dev.R
rstudioapi::navigateToFile("dev/02_dev.R")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
# You're now set! ----
# go to dev/03_deploy.R
rstudioapi::navigateToFile("dev/03_deploy.R")
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
## Posit ----
## If you want to deploy on Posit related platforms
golem::add_positconnect_file()
golem::add_shinyappsio_file()
## Posit ----
## If you want to deploy on Posit related platforms
golem::add_positconnect_file()
## Add/update manifest file (optional; for Git backed deployment on Posit )
rsconnect::writeManifest()
rsconnect::appDependencies()
## In command line.
rsconnect::deployApp(
appName = desc::desc_get_field("Package"),
appTitle = desc::desc_get_field("Package"),
appFiles = c(
# Add any additional files unique to your app here.
"R/",
"inst/",
"data/",
"NAMESPACE",
"DESCRIPTION",
"app.R"
),
appId = rsconnect::deployments(".")$appID,
lint = FALSE,
forceUpdate = TRUE
)
## Add/update manifest file (optional; for Git backed deployment on Posit )
rsconnect::writeManifest()
devtools::install_github("albgarre/soildiveragro")
## Add/update manifest file (optional; for Git backed deployment on Posit )
rsconnect::writeManifest()
rsconnect::appDependencies()
library(soildiveragro)
remove.packages("soildiveragro")
devtools::install_github("albgarre/soildiveragro")
rsconnect::appDependencies()
devtools::install_github("albgarre/soildiveragro")
renv::init()
renv::init()
rsconnect::appDependencies()
# You're now set! ----
# go to dev/03_deploy.R
rstudioapi::navigateToFile("dev/03_deploy.R")
## Add/update manifest file (optional; for Git backed deployment on Posit )
rsconnect::writeManifest()
## In command line.
rsconnect::deployApp(
appName = desc::desc_get_field("Package"),
appTitle = desc::desc_get_field("Package"),
appFiles = c(
# Add any additional files unique to your app here.
"R/",
"inst/",
"data/",
"NAMESPACE",
"DESCRIPTION",
"app.R"
),
appId = rsconnect::deployments(".")$appID,
lint = FALSE,
forceUpdate = TRUE
)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
?layout_columns
?layout_column_wrap
?layout_column_wrap
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
?card_body
?card_body
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
?navset_card_pill
golem::run_dev()
golem::run_dev()
install.packages("wesanderson")
library(soildiveragro)
wesanderson::wes_palette("AsteroidCity2", 4)
wesanderson::wes_palette("AsteroidCity2")
library(ggsci)
renv::activate()
renv::status()
renv::autoload()
renv::deactivate()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
?layout_column_wrap
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
?navset_card_pill
?navset_card_pill
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::add_module(name = "doc", with_test = FALSE)
golem::run_dev()
golem::run_dev()
golem::add_module(name = "about", with_test = FALSE)
golem::add_module(name = "about", with_test = FALSE)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
?navbarPage
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
library(soildiveragro)
library(soildiveragro)
runApp()
renv::deactivate()
library(soildiveragro)
## In command line.
rsconnect::deployApp(
appName = desc::desc_get_field("Package"),
appTitle = desc::desc_get_field("Package"),
appFiles = c(
# Add any additional files unique to your app here.
"R/",
"inst/",
"data/",
"NAMESPACE",
"DESCRIPTION",
"app.R"
),
appId = rsconnect::deployments(".")$appID,
lint = FALSE,
forceUpdate = TRUE
)
## Add/update manifest file (optional; for Git backed deployment on Posit )
rsconnect::writeManifest()
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
## Add/update manifest file (optional; for Git backed deployment on Posit )
rsconnect::writeManifest()
devtools::install_github("albgarre/soildiveragro")
devtools::install_github("albgarre/soildiveragro")
## In command line.
rsconnect::deployApp(
appName = desc::desc_get_field("Package"),
appTitle = desc::desc_get_field("Package"),
appFiles = c(
# Add any additional files unique to your app here.
"R/",
"inst/",
"data/",
"NAMESPACE",
"DESCRIPTION",
"app.R"
),
appId = rsconnect::deployments(".")$appID,
lint = FALSE,
forceUpdate = TRUE
)
golem::run_dev()
?bs_theme
golem::run_dev()
golem::run_dev()
?read_excel
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
?bs_themes
?bs_theme
?bs_theme
golem::run_dev()
golem::run_dev()
golem::run_dev()
tagList(
golem_add_external_resources(),
navbarPage(
windowTitle = "soildiveragro",
theme = bs_theme(bootswatch = "simplex",
primary = "#004b23",
secondary = "#91a773",
warning = "#744c28"
),
# thematic_shiny(),
##
title = tagList(#icon("home"),
img(src="www/SOILDIVERAGRO redes.png", width = "100px")
),
footer = tagList(
hr(),
layout_column_wrap(
width = 1/3,
"Version 0.1.0 - May 2025",
p(
align = "center",
tags$a(
href = "https://docs.google.com/document/d/1JQ7n-8D-NPpI-jW8znUBNIqN7W-wut0thtNoIJLIVT8/edit?usp=sharing",
"User manual"
)
# downloadLink("downloadManual", "User manual")
),
p(
align = "right",
# "Report an issue",
tags$a(
"Report an Issue",
href = "mailto:alberto.garre@upct.es?subject=%5BR4EU%5D%20SoilDiverAgroAppu&body=First%20Name%3A%0D%0ALast%20Name%3A%0D%0AOrganization%3A%0D%0ACountry%3A%0D%0ASoftware Version%3A%201.0.1%0D%0AFeedback%20or%20Issue%3A"
)
)
)
),
# tabPanel("Home",
#          mod_welcome_ui("welcome_1")
# ),
tabPanel("DST",
mod_prediction_ui("prediction_1")
),
tabPanel("Documentation",
mod_doc_ui("doc_1")
),
tabPanel("About",
mod_about_ui("about_1")
)
)
)
golem::run_dev()
golem::run_dev()
?navbarPage
